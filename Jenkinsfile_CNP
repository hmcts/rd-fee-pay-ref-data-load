#!groovy
properties(
  [
    [
      $class       : 'GithubProjectProperty',
      projectUrlStr: 'https://github.com/hmcts/rd-location-ref-data-load'
    ],
    pipelineTriggers([[$class: 'GitHubPushTrigger']])
  ]
)

@Library("Infrastructure")
import uk.gov.hmcts.contino.GradleBuilder


def type = "java"
def product = "rd"
def component = "location-ref-data-load"

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

def vaultOverrides = [
    'preview' : 'aat',
    'spreview': 'saat'
]

def secrets = [
  'rd-${env}': [
    secret('ACCOUNT-KEY-PREVIEW', 'ACCOUNT_KEY_PREVIEW'),
    secret('ACCOUNT-NAME', 'ACCOUNT_NAME')
  ]
]

GradleBuilder builder = new GradleBuilder(this, product)

withPipeline(type, product, component) {
  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)
  onMaster {
    enableSlackNotifications('#rd-location-ref-data-load-builds')
    env.execution_environment = "aat"
  }
  onPR {
    enableSlackNotifications('#rd-location-ref-data-load-builds')
    env.execution_environment = "preview"
  }
  enableAksStagingDeployment()
  disableLegacyDeploymentOnAAT()
  disableLegacyDeployment()
  nonServiceApp()


  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/cucumber/**/*'
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/cucumber/**/*'
  }

  after('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/site/serenity/**'
  }

  after('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/site/serenity/**'
  }

  after('akschartsinstall') {
    echo "Just waiting a while to ensure that the pod has run the job"
    def time = "120"
    echo "Waiting ${time} seconds for deployment to complete prior starting functional testing"
    sleep time.toInteger() // seconds
    try {
      builder.gradle('functional')
    } finally {
      junit '**/test-results/**/*.xml'
    }
  }
}
